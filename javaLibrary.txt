// Function 1: getCurrentDateTime
// Description: Returns the current date and time in the format: yyyy-MM-dd HH:mm:ss.
// Marker: getCurrentDateTime
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public static String getCurrentDateTime() {
    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    LocalDateTime now = LocalDateTime.now();
    return dtf.format(now);
}

// Function 2: isNullOrEmpty
// Description: Checks if a string is null or empty.
// Marker: isNullOrEmpty
public static boolean isNullOrEmpty(String str) {
    return str == null || str.isEmpty();
}

// Function 3: generateRandomNumber
// Description: Generates a random integer between a specified range (inclusive).
// Marker: generateRandomNumber
import java.util.Random;

public static int generateRandomNumber(int min, int max) {
    Random rand = new Random();
    return rand.nextInt((max - min) + 1) + min;
}

// Function 4: reverseString
// Description: Reverses a given string.
// Marker: reverseString
public static String reverseString(String input) {
    return new StringBuilder(input).reverse().toString();
}

// Function 5: factorial
// Description: Calculates the factorial of a non-negative integer using recursion.
// Marker: factorial
public static long factorial(int n) {
    if (n == 0) return 1;
    return n * factorial(n - 1);
}

// Function 6: isPalindrome
// Description: Checks if a given string is a palindrome (reads the same forward and backward).
// Marker: isPalindrome
public static boolean isPalindrome(String input) {
    String cleanInput = input.replaceAll("\\s+", "").toLowerCase();
    return cleanInput.equals(new StringBuilder(cleanInput).reverse().toString());
}

// Function 7: convertArrayToList
// Description: Converts an array into a list.
// Marker: convertArrayToList
import java.util.Arrays;
import java.util.List;

public static <T> List<T> convertArrayToList(T[] array) {
    return Arrays.asList(array);
}

// Function 8: getMaxFromArray
// Description: Returns the maximum value from an array of integers.
// Marker: getMaxFromArray
public static int getMaxFromArray(int[] array) {
    int max = array[0];
    for (int num : array) {
        if (num > max) {
            max = num;
        }
    }
    return max;
}

// Function 9: roundToTwoDecimalPlaces
// Description: Rounds a double value to two decimal places.
// Marker: roundToTwoDecimalPlaces
public static double roundToTwoDecimalPlaces(double value) {
    return Math.round(value * 100.0) / 100.0;
}

// Function 10: removeDuplicatesFromList
// Description: Removes duplicate elements from a list.
// Marker: removeDuplicatesFromList
import java.util.List;
import java.util.Set;
import java.util.LinkedHashSet;

public static <T> List<T> removeDuplicatesFromList(List<T> list) {
    Set<T> set = new LinkedHashSet<>(list);
    return List.copyOf(set);
}

// Function 11: countVowels
// Description: Counts the number of vowels (a, e, i, o, u) in a given string.
// Marker: countVowels
public static int countVowels(String input) {
    int count = 0;
    String vowels = "aeiouAEIOU";
    for (char c : input.toCharArray()) {
        if (vowels.indexOf(c) != -1) {
            count++;
        }
    }
    return count;
}

// Function 12: capitalizeWords
// Description: Capitalizes the first letter of every word in a sentence.
// Marker: capitalizeWords
public static String capitalizeWords(String sentence) {
    String[] words = sentence.split("\\s+");
    StringBuilder capitalizedSentence = new StringBuilder();
    for (String word : words) {
        capitalizedSentence.append(Character.toUpperCase(word.charAt(0)))
                           .append(word.substring(1).toLowerCase()).append(" ");
    }
    return capitalizedSentence.toString().trim();
}

// Function 13: getUniqueElements
// Description: Returns the unique elements from an array of integers.
// Marker: getUniqueElements
import java.util.Set;
import java.util.HashSet;

public static int[] getUniqueElements(int[] array) {
    Set<Integer> uniqueSet = new HashSet<>();
    for (int num : array) {
        uniqueSet.add(num);
    }
    return uniqueSet.stream().mapToInt(i -> i).toArray();
}

// Function 14: gcd
// Description: Finds the greatest common divisor (GCD) of two integers using recursion.
// Marker: gcd
public static int gcd(int a, int b) {
    if (b == 0) {
        return a;
    }
    return gcd(b, a % b);
}

// Function 15: convertCelsiusToFahrenheit
// Description: Converts Celsius temperature to Fahrenheit.
// Marker: convertCelsiusToFahrenheit
public static double convertCelsiusToFahrenheit(double celsius) {
    return (celsius * 9/5) + 32;
}
